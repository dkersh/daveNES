<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="190" skipped="0" tests="1510" time="336.136" timestamp="2023-05-31T00:31:46.356881" hostname="DESKTOP-81OAIKM"><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i0]" time="0.120" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i1]" time="0.156" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i2]" time="0.122" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i3]" time="0.164" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i4]" time="0.120" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i5]" time="0.156" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i6]" time="0.123" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i7]" time="0.165" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i8]" time="0.118" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/69.json-i9]" time="0.157" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i10]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i11]" time="0.160" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i12]" time="0.169" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i13]" time="0.170" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i14]" time="0.173" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i15]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i16]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i17]" time="0.164" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i18]" time="0.169" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/65.json-i19]" time="0.170" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i20]" time="0.190" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i21]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i22]" time="0.182"><failure message="assert 240 == 112&#10; +  where 112 = &lt;cpu.MOS6502 object at 0x00000202FDF094B0&gt;.r_accumulator">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 240 == 112
E        +  where 112 = &lt;cpu.MOS6502 object at 0x00000202FDF094B0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i23]" time="0.176" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i24]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i25]" time="0.197"><failure message="assert 34 == 105&#10; +  where 105 = &lt;cpu.MOS6502 object at 0x00000202FF427D30&gt;.r_accumulator">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 34 == 105
E        +  where 105 = &lt;cpu.MOS6502 object at 0x00000202FF427D30&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i26]" time="0.190"><failure message="assert 53 == 198&#10; +  where 198 = &lt;cpu.MOS6502 object at 0x00000202FCA28070&gt;.r_accumulator">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 53 == 198
E        +  where 198 = &lt;cpu.MOS6502 object at 0x00000202FCA28070&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i27]" time="0.188"><failure message="assert 251 == 39&#10; +  where 39 = &lt;cpu.MOS6502 object at 0x00000202FDF0A9E0&gt;.r_accumulator">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 251 == 39
E        +  where 39 = &lt;cpu.MOS6502 object at 0x00000202FDF0A9E0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i28]" time="0.185" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json-i29]" time="0.180"><failure message="assert 249 == 17&#10; +  where 17 = &lt;cpu.MOS6502 object at 0x00000202FF133D60&gt;.r_accumulator">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/75.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 249 == 17
E        +  where 17 = &lt;cpu.MOS6502 object at 0x00000202FF133D60&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i30]" time="0.176" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i31]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i32]" time="0.199" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i33]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i34]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i35]" time="0.183" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i36]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i37]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i38]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6d.json-i39]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i40]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i41]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i42]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i43]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i44]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i45]" time="0.257" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i46]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i47]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i48]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7d.json-i49]" time="0.261" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i50]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i51]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i52]" time="0.257" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i53]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i54]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i55]" time="0.250" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i56]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i57]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i58]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/79.json-i59]" time="0.243" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i60]" time="0.283" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i61]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i62]" time="0.272" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i63]" time="0.296" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i64]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i65]" time="0.254" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i66]" time="0.261" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i67]" time="0.271" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i68]" time="0.284" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/61.json-i69]" time="0.227" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i70]" time="0.258" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i71]" time="0.277" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i72]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i73]" time="0.267" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i74]" time="0.217" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i75]" time="0.269" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i76]" time="0.286" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i77]" time="0.252" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i78]" time="0.282" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/71.json-i79]" time="0.288" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i80]" time="0.126" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i81]" time="0.172" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i82]" time="0.125" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i83]" time="0.167" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i84]" time="0.146" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i85]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i86]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i87]" time="0.125" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i88]" time="0.157" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/29.json-i89]" time="0.126" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i90]" time="0.169" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i91]" time="0.174" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i92]" time="0.181" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i93]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i94]" time="0.198" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i95]" time="0.141" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i96]" time="0.166" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i97]" time="0.176" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i98]" time="0.179" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/25.json-i99]" time="0.191" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i100]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i101]" time="0.203"><failure message="assert 38 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FDF0A9E0&gt;.r_accumulator">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 38 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FDF0A9E0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i102]" time="0.207"><failure message="assert 70 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF427F40&gt;.r_accumulator">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 70 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF427F40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i103]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i104]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i105]" time="0.299"><failure message="assert 32 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF427F40&gt;.r_accumulator">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 32 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF427F40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i106]" time="0.234"><failure message="assert 9 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FDF0A9E0&gt;.r_accumulator">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 9 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FDF0A9E0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i107]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i108]" time="0.215"><failure message="assert 134 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF427F40&gt;.r_accumulator">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 134 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF427F40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json-i109]" time="0.201"><failure message="assert 192 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF133DC0&gt;.r_accumulator">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/35.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 192 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF133DC0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i110]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i111]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i112]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i113]" time="0.209" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i114]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i115]" time="0.197" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i116]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i117]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i118]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2d.json-i119]" time="0.279" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i120]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i121]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i122]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i123]" time="0.280" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i124]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i125]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i126]" time="0.251" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i127]" time="0.212" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i128]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3d.json-i129]" time="0.260" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i130]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i131]" time="0.213" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i132]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i133]" time="0.243" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i134]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i135]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i136]" time="0.336" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i137]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i138]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/39.json-i139]" time="0.276" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i140]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i141]" time="0.262" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i142]" time="0.275" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i143]" time="0.287" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i144]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i145]" time="0.264" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i146]" time="0.280" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i147]" time="0.302" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i148]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/21.json-i149]" time="0.260" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i150]" time="0.277" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i151]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i152]" time="0.262" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i153]" time="0.277" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i154]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i155]" time="0.267" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i156]" time="0.285" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i157]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i158]" time="0.266" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/31.json-i159]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i160]" time="0.159" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i161]" time="0.117" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i162]" time="0.161" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i163]" time="0.120" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i164]" time="0.158" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i165]" time="0.122" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i166]" time="0.175" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i167]" time="0.143" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i168]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0a.json-i169]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i170]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i171]" time="0.294" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i172]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i173]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i174]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i175]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i176]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i177]" time="0.202" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i178]" time="0.198" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/06.json-i179]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i180]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i181]" time="0.264" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i182]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i183]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i184]" time="0.260" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i185]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i186]" time="0.212" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i187]" time="0.276" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i188]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/16.json-i189]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i190]" time="0.264" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i191]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i192]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i193]" time="0.260" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i194]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i195]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i196]" time="0.257" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i197]" time="0.213" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i198]" time="0.269" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0e.json-i199]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i200]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i201]" time="0.268" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i202]" time="0.286" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i203]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i204]" time="0.280" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i205]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i206]" time="0.274" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i207]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i208]" time="0.274" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1e.json-i209]" time="0.292" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i210]" time="0.136" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i211]" time="0.177" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i212]" time="0.185" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i213]" time="0.137" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i214]" time="0.166" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i215]" time="0.199" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i216]" time="0.163" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i217]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i218]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/90.json-i219]" time="0.198" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i220]" time="0.141" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i221]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i222]" time="0.190" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i223]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i224]" time="0.174" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i225]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i226]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i227]" time="0.170" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i228]" time="0.197" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b0.json-i229]" time="0.191" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i230]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i231]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i232]" time="0.183" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i233]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i234]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i235]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i236]" time="0.162" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i237]" time="0.191" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i238]" time="0.179" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f0.json-i239]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i240]" time="0.141" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i241]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i242]" time="0.181" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i243]" time="0.185" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i244]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i245]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i246]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i247]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i248]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/24.json-i249]" time="0.186" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i250]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i251]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i252]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i253]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i254]" time="0.185" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i255]" time="0.246" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i256]" time="0.217" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i257]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i258]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2c.json-i259]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i260]" time="0.185"><failure message="assert 41798 == 41799&#10; +  where 41799 = &lt;cpu.MOS6502 object at 0x00000202FF133DC0&gt;.r_program_counter">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 41798 == 41799
E        +  where 41799 = &lt;cpu.MOS6502 object at 0x00000202FF133DC0&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i261]" time="0.194"><failure message="assert 39255 == 39256&#10; +  where 39256 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 39255 == 39256
E        +  where 39256 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i262]" time="0.139"><failure message="assert 15927 == 15928&#10; +  where 15928 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 15927 == 15928
E        +  where 15928 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i263]" time="0.168" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i264]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i265]" time="0.132" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i266]" time="0.180"><failure message="assert 39858 == 39859&#10; +  where 39859 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 39858 == 39859
E        +  where 39859 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i267]" time="0.183"><failure message="assert 51456 == 51457&#10; +  where 51457 = &lt;cpu.MOS6502 object at 0x00000202FF1BD5A0&gt;.r_program_counter">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 51456 == 51457
E        +  where 51457 = &lt;cpu.MOS6502 object at 0x00000202FF1BD5A0&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i268]" time="0.189"><failure message="assert 30415 == 30416&#10; +  where 30416 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 30415 == 30416
E        +  where 30416 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json-i269]" time="0.136"><failure message="assert 21030 == 21031&#10; +  where 21031 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/30.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 21030 == 21031
E        +  where 21031 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i270]" time="0.175" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i271]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i272]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i273]" time="0.169" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i274]" time="0.179" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i275]" time="0.137" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i276]" time="0.169" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i277]" time="0.176" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i278]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d0.json-i279]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i280]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i281]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i282]" time="0.136" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i283]" time="0.169" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i284]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i285]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i286]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i287]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i288]" time="0.209" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/10.json-i289]" time="0.137" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i290]" time="0.297"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[59521, 0, 'read'], [59522, 53, 'read'], [498, 232, 'write'], [497, 131, 'write'], [496, 113, 'write'], [6... 59521, 'ram': [[59521, 0], [59522, 53], [59523, 38], [65534, 21], [65535, 35], [8981, 229]], ...}, 'name': '00 35 26'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i291]" time="0.304"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[8555, 0, 'read'], [8556, 201, 'read'], [332, 33, 'write'], [331, 109, 'write'], [330, 187, 'write'], [655...: 8555, 'ram': [[8555, 0], [8556, 201], [8557, 84], [65534, 41], [65535, 182], [46633, 106]], ...}, 'name': '00 c9 54'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i292]" time="0.299"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[510, 0, 'read'], [511, 79, 'read'], [352, 2, 'write'], [351, 0, 'write'], [350, 191, 'write'], [65534, 14...5, 'pc': 510, 'ram': [[510, 0], [511, 79], [512, 27], [65534, 149], [65535, 56], [14485, 6]], ...}, 'name': '00 4f 1b'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i293]" time="0.291"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[30402, 0, 'read'], [30403, 169, 'read'], [278, 118, 'write'], [277, 196, 'write'], [276, 177, 'write'], [...402, 'ram': [[30402, 0], [30403, 169], [30404, 211], [65534, 83], [65535, 210], [53843, 74]], ...}, 'name': '00 a9 d3'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i294]" time="0.318"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[60613, 0, 'read'], [60614, 101, 'read'], [278, 236, 'write'], [277, 199, 'write'], [276, 59, 'write'], [6...613, 'ram': [[60613, 0], [60614, 101], [60615, 123], [65534, 117], [65535, 70], [18037, 20]], ...}, 'name': '00 65 7b'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i295]" time="0.290"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[59404, 0, 'read'], [59405, 200, 'read'], [359, 232, 'write'], [358, 14, 'write'], [357, 53, 'write'], [65...04, 'ram': [[59404, 0], [59405, 200], [59406, 99], [65534, 222], [65535, 116], [29918, 170]], ...}, 'name': '00 c8 63'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i296]" time="0.292"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[531, 0, 'read'], [532, 211, 'read'], [336, 2, 'write'], [335, 21, 'write'], [334, 54, 'write'], [65534, 2...'pc': 531, 'ram': [[531, 0], [532, 211], [533, 208], [65534, 225], [65535, 14], [3809, 229]], ...}, 'name': '00 d3 d0'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i297]" time="0.299"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[12175, 0, 'read'], [12176, 136, 'read'], [336, 47, 'write'], [335, 145, 'write'], [334, 53, 'write'], [65...2175, 'ram': [[12175, 0], [12176, 136], [12177, 46], [65534, 40], [65535, 52], [13352, 196]], ...}, 'name': '00 88 2e'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i298]" time="0.295"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[43998, 0, 'read'], [43999, 103, 'read'], [299, 171, 'write'], [298, 224, 'write'], [297, 118, 'write'], [...98, 'ram': [[43998, 0], [43999, 103], [44000, 194], [65534, 46], [65535, 179], [45870, 252]], ...}, 'name': '00 67 c2'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json-i299]" time="0.298"><failure message="IndexError: index 65535 is out of bounds for axis 0 with size 65535">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/00.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
&gt;       daveNES = init_daveNES(test)

tests\test_cpu.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test = {'cycles': [[13714, 0, 'read'], [13715, 169, 'read'], [467, 53, 'write'], [466, 148, 'write'], [465, 112, 'write'], [6...714, 'ram': [[13714, 0], [13715, 169], [13716, 14], [65534, 97], [65535, 158], [40545, 243]], ...}, 'name': '00 a9 0e'}

    def init_daveNES(test):
        daveNES = cpu.MOS6502(debug = False)
        daveNES.initialise_RAM()
    
        # Load test program
        for val in test['initial']['ram']:
            print(f'{val[0]}, {val[1]}')
&gt;           daveNES.ram.memory[val[0]] = np.uint8(val[1])
E           IndexError: index 65535 is out of bounds for axis 0 with size 65535

tests\test_cpu.py:35: IndexError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i300]" time="0.173" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i301]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i302]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i303]" time="0.167" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i304]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i305]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i306]" time="0.171" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i307]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i308]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/50.json-i309]" time="0.147" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i310]" time="0.190" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i311]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i312]" time="0.158" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i313]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i314]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i315]" time="0.136" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i316]" time="0.197" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i317]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i318]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/70.json-i319]" time="0.151" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i320]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i321]" time="0.124" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i322]" time="0.177" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i323]" time="0.125" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i324]" time="0.177" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i325]" time="0.124" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i326]" time="0.166" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i327]" time="0.124" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i328]" time="0.168" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/18.json-i329]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i330]" time="0.167" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i331]" time="0.127" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i332]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i333]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i334]" time="0.175" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i335]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i336]" time="0.170" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i337]" time="0.139" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i338]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d8.json-i339]" time="0.139" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i340]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i341]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i342]" time="0.174" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i343]" time="0.128" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i344]" time="0.176" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i345]" time="0.125" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i346]" time="0.174" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i347]" time="0.126" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i348]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/58.json-i349]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i350]" time="0.209" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i351]" time="0.137" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i352]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i353]" time="0.126" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i354]" time="0.181" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i355]" time="0.126" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i356]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i357]" time="0.146" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i358]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b8.json-i359]" time="0.130" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i360]" time="0.175" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i361]" time="0.128" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i362]" time="0.177" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i363]" time="0.139" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i364]" time="0.186" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i365]" time="0.146" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i366]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i367]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i368]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c9.json-i369]" time="0.137" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i370]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i371]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i372]" time="0.143" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i373]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i374]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i375]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i376]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i377]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i378]" time="0.152" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c5.json-i379]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i380]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i381]" time="0.270" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i382]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i383]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i384]" time="0.242" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i385]" time="0.232" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i386]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i387]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i388]" time="0.278" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d5.json-i389]" time="0.257" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i390]" time="0.234" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i391]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i392]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i393]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i394]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i395]" time="0.276" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i396]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i397]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i398]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cd.json-i399]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i400]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i401]" time="0.268" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i402]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i403]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i404]" time="0.284" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i405]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i406]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i407]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i408]" time="0.289" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/dd.json-i409]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i410]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i411]" time="0.278" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i412]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i413]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i414]" time="0.282" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i415]" time="0.234" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i416]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i417]" time="0.278" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i418]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d9.json-i419]" time="0.232" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i420]" time="0.323" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i421]" time="0.325" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i422]" time="0.256" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i423]" time="0.291" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i424]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i425]" time="0.314" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i426]" time="0.316" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i427]" time="0.250" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i428]" time="0.310" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c1.json-i429]" time="0.352" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i430]" time="0.275" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i431]" time="0.321" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i432]" time="0.337" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i433]" time="0.247" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i434]" time="0.301" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i435]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i436]" time="0.270" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i437]" time="0.295" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i438]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d1.json-i439]" time="0.283" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i440]" time="0.129" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i441]" time="0.164" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i442]" time="0.127" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i443]" time="0.168" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i444]" time="0.128" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i445]" time="0.163" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i446]" time="0.122" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i447]" time="0.166" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i448]" time="0.129" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e0.json-i449]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i450]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i451]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i452]" time="0.150" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i453]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i454]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i455]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i456]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i457]" time="0.147" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i458]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e4.json-i459]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i460]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i461]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i462]" time="0.275" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i463]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i464]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i465]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i466]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i467]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i468]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ec.json-i469]" time="0.266" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i470]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i471]" time="0.179" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i472]" time="0.142" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i473]" time="0.177" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i474]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i475]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i476]" time="0.137" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i477]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i478]" time="0.148" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c0.json-i479]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i480]" time="0.143" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i481]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i482]" time="0.199" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i483]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i484]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i485]" time="0.167" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i486]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i487]" time="0.192" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i488]" time="0.192" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c4.json-i489]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i490]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i491]" time="0.213" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i492]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i493]" time="0.202" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i494]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i495]" time="0.265" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i496]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i497]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i498]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/cc.json-i499]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i500]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i501]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i502]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i503]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i504]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i505]" time="0.192" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i506]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i507]" time="0.186" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i508]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c6.json-i509]" time="0.255" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i510]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i511]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i512]" time="0.289" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i513]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i514]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i515]" time="0.273" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i516]" time="0.227" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i517]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i518]" time="0.270" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/d6.json-i519]" time="0.247" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i520]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i521]" time="0.274" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i522]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i523]" time="0.277" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i524]" time="0.355" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i525]" time="0.234" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i526]" time="0.298" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i527]" time="0.258" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i528]" time="0.241" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ce.json-i529]" time="0.288" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i530]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i531]" time="0.292" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i532]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i533]" time="0.284" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i534]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i535]" time="0.298" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i536]" time="0.315" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i537]" time="0.247" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i538]" time="0.307" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/de.json-i539]" time="0.258" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i540]" time="0.190" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i541]" time="0.137" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i542]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i543]" time="0.130" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i544]" time="0.176" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i545]" time="0.129" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i546]" time="0.183" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i547]" time="0.130" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i548]" time="0.177" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ca.json-i549]" time="0.129" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i550]" time="0.175" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i551]" time="0.130" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i552]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i553]" time="0.144" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i554]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i555]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i556]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i557]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i558]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/88.json-i559]" time="0.142" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i560]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i561]" time="0.172" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i562]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i563]" time="0.169" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i564]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i565]" time="0.154" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i566]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i567]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i568]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/49.json-i569]" time="0.143" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i570]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i571]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i572]" time="0.156" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i573]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i574]" time="0.198" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i575]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i576]" time="0.199" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i577]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i578]" time="0.164" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/45.json-i579]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i580]" time="0.214"><failure message="assert 6 == 95&#10; +  where 95 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_accumulator">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 6 == 95
E        +  where 95 = &lt;cpu.MOS6502 object at 0x0000020281904C70&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i581]" time="0.204"><failure message="assert 232 == 65&#10; +  where 65 = &lt;cpu.MOS6502 object at 0x000002028199CA30&gt;.r_accumulator">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 232 == 65
E        +  where 65 = &lt;cpu.MOS6502 object at 0x000002028199CA30&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i582]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i583]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i584]" time="0.209"><failure message="assert 3 == 118&#10; +  where 118 = &lt;cpu.MOS6502 object at 0x00000202FEEF87C0&gt;.r_accumulator">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 3 == 118
E        +  where 118 = &lt;cpu.MOS6502 object at 0x00000202FEEF87C0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i585]" time="0.205"><failure message="assert 204 == 175&#10; +  where 175 = &lt;cpu.MOS6502 object at 0x000002028199CA30&gt;.r_accumulator">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 204 == 175
E        +  where 175 = &lt;cpu.MOS6502 object at 0x000002028199CA30&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i586]" time="0.199"><failure message="assert 115 == 131&#10; +  where 131 = &lt;cpu.MOS6502 object at 0x00000202FEEF87C0&gt;.r_accumulator">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 115 == 131
E        +  where 131 = &lt;cpu.MOS6502 object at 0x00000202FEEF87C0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i587]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i588]" time="0.259" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/55.json-i589]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i590]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i591]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i592]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i593]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i594]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i595]" time="0.307" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i596]" time="0.260" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i597]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i598]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4d.json-i599]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i600]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i601]" time="0.311" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i602]" time="0.242" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i603]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i604]" time="0.304" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i605]" time="0.246" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i606]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i607]" time="0.313" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i608]" time="0.242" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5d.json-i609]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i610]" time="0.214" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i611]" time="0.270" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i612]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i613]" time="0.232" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i614]" time="0.282" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i615]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i616]" time="0.234" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i617]" time="0.288" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i618]" time="0.244" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/59.json-i619]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i620]" time="0.314" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i621]" time="0.309" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i622]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i623]" time="0.294" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i624]" time="0.310" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i625]" time="0.317" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i626]" time="0.248" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i627]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i628]" time="0.329" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/41.json-i629]" time="0.374" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i630]" time="0.258" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i631]" time="0.330" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i632]" time="0.270" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i633]" time="0.297" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i634]" time="0.307" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i635]" time="0.241" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i636]" time="0.307" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i637]" time="0.324" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i638]" time="0.256" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/51.json-i639]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i640]" time="0.232" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i641]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i642]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i643]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i644]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i645]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i646]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i647]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i648]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e6.json-i649]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i650]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i651]" time="0.279" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i652]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i653]" time="0.303" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i654]" time="0.243" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i655]" time="0.227" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i656]" time="0.286" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i657]" time="0.238" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i658]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f6.json-i659]" time="0.295" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i660]" time="0.243" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i661]" time="0.238" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i662]" time="0.302" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i663]" time="0.247" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i664]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i665]" time="0.290" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i666]" time="0.234" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i667]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i668]" time="0.284" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ee.json-i669]" time="0.260" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i670]" time="0.339" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i671]" time="0.253" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i672]" time="0.295" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i673]" time="0.248" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i674]" time="0.311" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i675]" time="0.345" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i676]" time="0.269" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i677]" time="0.330" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i678]" time="0.249" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fe.json-i679]" time="0.303" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i680]" time="0.127" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i681]" time="0.171" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i682]" time="0.125" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i683]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i684]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i685]" time="0.169" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i686]" time="0.125" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i687]" time="0.173" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i688]" time="0.129" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e8.json-i689]" time="0.170" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i690]" time="0.124" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i691]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i692]" time="0.127" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i693]" time="0.169" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i694]" time="0.128" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i695]" time="0.173" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i696]" time="0.126" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i697]" time="0.174" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i698]" time="0.125" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json-i699]" time="0.172"><failure message="assert 0 == 256&#10; +  where 256 = &lt;cpu.MOS6502 object at 0x00000202FEEF87C0&gt;.r_index_Y">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/c8.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
        assert test['final']['x'] == daveNES.r_index_X
&gt;       assert test['final']['y'] == daveNES.r_index_Y
E       assert 0 == 256
E        +  where 256 = &lt;cpu.MOS6502 object at 0x00000202FEEF87C0&gt;.r_index_Y

tests\test_cpu.py:58: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i700]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i701]" time="0.142" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i702]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i703]" time="0.190" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i704]" time="0.197" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i705]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i706]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i707]" time="0.151" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i708]" time="0.192" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4c.json-i709]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i710]" time="0.234"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280863EE0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i711]" time="0.246"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280863EE0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i712]" time="0.300"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280863EE0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i713]" time="0.256"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280863EE0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i714]" time="0.321"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280863EE0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i715]" time="0.240"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280863EE0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i716]" time="0.293"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280863EE0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i717]" time="0.234"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280863EE0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i718]" time="0.293"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280863EE0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json-i719]" time="0.237"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6c.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
src\cpu.py:629: in JMP
    addr = self.get_operand_address(mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202808F85E0&gt;, mode = &lt;AddressingMode.INDIRECT: 8&gt;

    def get_operand_address(self, mode: AddressingMode) -&gt; np.uint16:
        # TODO: Update the program counter numbers so they're gotten from the lookup
        match mode:
            case AddressingMode.IMMEDIATE:
                value = self.r_program_counter
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE:
                value = self.ram.read(self.r_program_counter)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_X:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_X
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ZERO_PAGE_Y:
                pos = self.ram.read(self.r_program_counter)
                value = (
                    pos + self.r_index_Y
                )  # Wrapping Add (may throw overflow exception)
                self.r_program_counter += 1
                return value
    
            case AddressingMode.ABSOLUTE:
                value = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return value
    
            case AddressingMode.ABSOLUTE_X:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_X) # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.ABSOLUTE_Y:
                base = self.ram.read_u16(self.r_program_counter)
                self.r_program_counter += 2
                return base + np.uint16(self.r_index_Y)  # Wrapping Add (may throw overflow exception)
    
            case AddressingMode.INDIRECT:
&gt;               raise NotImplementedError
E               NotImplementedError

src\cpu.py:348: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i720]" time="0.281" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i721]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i722]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i723]" time="0.249" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i724]" time="0.319" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i725]" time="0.267" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i726]" time="0.331" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i727]" time="0.247" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i728]" time="0.312" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/20.json-i729]" time="0.283" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i730]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i731]" time="0.150" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i732]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i733]" time="0.139" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i734]" time="0.183" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i735]" time="0.129" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i736]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i737]" time="0.132" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i738]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a9.json-i739]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i740]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i741]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i742]" time="0.217" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i743]" time="0.146" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i744]" time="0.181" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i745]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i746]" time="0.192" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i747]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i748]" time="0.145" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a5.json-i749]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i750]" time="0.202" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i751]" time="0.274"><failure message="assert 180 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF21BA60&gt;.r_accumulator">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 180 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF21BA60&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i752]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i753]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i754]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i755]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i756]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i757]" time="0.229"><failure message="assert 32 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202808F85E0&gt;.r_accumulator">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 32 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202808F85E0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i758]" time="0.332" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json-i759]" time="0.244"><failure message="assert 122 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF2B47C0&gt;.r_accumulator">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b5.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 122 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF2B47C0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i760]" time="0.252" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i761]" time="0.270" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i762]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i763]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i764]" time="0.266" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i765]" time="0.326" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i766]" time="0.273" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i767]" time="0.249" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i768]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ad.json-i769]" time="0.217" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i770]" time="0.232" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i771]" time="0.299" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i772]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i773]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i774]" time="0.313" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i775]" time="0.242" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i776]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i777]" time="0.332" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i778]" time="0.272" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bd.json-i779]" time="0.249" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i780]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i781]" time="0.309" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i782]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i783]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i784]" time="0.279" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i785]" time="0.242" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i786]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i787]" time="0.296" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i788]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b9.json-i789]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i790]" time="0.323" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i791]" time="0.382" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i792]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i793]" time="0.318" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i794]" time="0.325" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i795]" time="0.332" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i796]" time="0.262" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i797]" time="0.366" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i798]" time="0.321" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a1.json-i799]" time="0.370" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i800]" time="0.264" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i801]" time="0.327" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i802]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i803]" time="0.312" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i804]" time="0.359" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i805]" time="0.261" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i806]" time="0.354" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i807]" time="0.273" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i808]" time="0.298" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b1.json-i809]" time="0.327" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i810]" time="0.144" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i811]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i812]" time="0.132" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i813]" time="0.183" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i814]" time="0.130" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i815]" time="0.179" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i816]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i817]" time="0.183" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i818]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a2.json-i819]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i820]" time="0.162" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i821]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i822]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i823]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i824]" time="0.213" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i825]" time="0.152" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i826]" time="0.185" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i827]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i828]" time="0.202" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a6.json-i829]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i830]" time="0.227" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i831]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i832]" time="0.225"><failure message="assert 217 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF2B4760&gt;.r_index_X">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
&gt;       assert test['final']['x'] == daveNES.r_index_X
E       assert 217 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF2B4760&gt;.r_index_X

tests\test_cpu.py:57: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i833]" time="0.209"><failure message="assert 70 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF21B3A0&gt;.r_index_X">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
&gt;       assert test['final']['x'] == daveNES.r_index_X
E       assert 70 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF21B3A0&gt;.r_index_X

tests\test_cpu.py:57: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i834]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i835]" time="0.288"><failure message="assert 85 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF21B3A0&gt;.r_index_X">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
&gt;       assert test['final']['x'] == daveNES.r_index_X
E       assert 85 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF21B3A0&gt;.r_index_X

tests\test_cpu.py:57: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i836]" time="0.266"><failure message="assert 81 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x0000020280445AE0&gt;.r_index_X">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
&gt;       assert test['final']['x'] == daveNES.r_index_X
E       assert 81 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x0000020280445AE0&gt;.r_index_X

tests\test_cpu.py:57: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i837]" time="0.276" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i838]" time="0.232" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b6.json-i839]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i840]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i841]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i842]" time="0.288" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i843]" time="0.234" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i844]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i845]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i846]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i847]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i848]" time="0.199" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ae.json-i849]" time="0.265" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i850]" time="0.238" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i851]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i852]" time="0.294" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i853]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i854]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i855]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i856]" time="0.288" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i857]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i858]" time="0.247" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/be.json-i859]" time="0.293" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i860]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i861]" time="0.183" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i862]" time="0.129" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i863]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i864]" time="0.141" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i865]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i866]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i867]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i868]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a0.json-i869]" time="0.183" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i870]" time="0.143" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i871]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i872]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i873]" time="0.197" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i874]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i875]" time="0.146" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i876]" time="0.179" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i877]" time="0.191" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i878]" time="0.191" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a4.json-i879]" time="0.199" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i880]" time="0.222"><failure message="assert 249 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x0000020280445AE0&gt;.r_index_Y">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
        assert test['final']['x'] == daveNES.r_index_X
&gt;       assert test['final']['y'] == daveNES.r_index_Y
E       assert 249 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x0000020280445AE0&gt;.r_index_Y

tests\test_cpu.py:58: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i881]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i882]" time="0.215"><failure message="assert 84 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202804CA920&gt;.r_index_Y">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
        assert test['final']['x'] == daveNES.r_index_X
&gt;       assert test['final']['y'] == daveNES.r_index_Y
E       assert 84 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202804CA920&gt;.r_index_Y

tests\test_cpu.py:58: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i883]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i884]" time="0.289" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i885]" time="0.242"><failure message="assert 67 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_index_Y">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
        assert test['final']['x'] == daveNES.r_index_X
&gt;       assert test['final']['y'] == daveNES.r_index_Y
E       assert 67 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_index_Y

tests\test_cpu.py:58: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i886]" time="0.237"><failure message="assert 142 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_index_Y">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
        assert test['final']['x'] == daveNES.r_index_X
&gt;       assert test['final']['y'] == daveNES.r_index_Y
E       assert 142 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_index_Y

tests\test_cpu.py:58: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i887]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i888]" time="0.214" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json-i889]" time="0.212"><failure message="assert 242 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_index_Y">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/b4.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
        assert test['final']['a'] == daveNES.r_accumulator
        assert test['final']['x'] == daveNES.r_index_X
&gt;       assert test['final']['y'] == daveNES.r_index_Y
E       assert 242 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_index_Y

tests\test_cpu.py:58: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i890]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i891]" time="0.284" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i892]" time="0.243" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i893]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i894]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i895]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i896]" time="0.219" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i897]" time="0.214" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i898]" time="0.290" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ac.json-i899]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i900]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i901]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i902]" time="0.290" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i903]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i904]" time="0.242" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i905]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i906]" time="0.299" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i907]" time="0.249" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i908]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/bc.json-i909]" time="0.283" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i910]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i911]" time="0.179" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i912]" time="0.127" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i913]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i914]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i915]" time="0.181" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i916]" time="0.130" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i917]" time="0.181" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i918]" time="0.132" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4a.json-i919]" time="0.181" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i920]" time="0.217" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i921]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i922]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i923]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i924]" time="0.212" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i925]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i926]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i927]" time="0.212" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i928]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/46.json-i929]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i930]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i931]" time="0.287" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i932]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i933]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i934]" time="0.304" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i935]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i936]" time="0.248" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i937]" time="0.304" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i938]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/56.json-i939]" time="0.345" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i940]" time="0.278" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i941]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i942]" time="0.297" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i943]" time="0.243" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i944]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i945]" time="0.286" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i946]" time="0.238" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i947]" time="0.220" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i948]" time="0.284" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/4e.json-i949]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i950]" time="0.308" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i951]" time="0.249" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i952]" time="0.307" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i953]" time="0.246" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i954]" time="0.319" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i955]" time="0.261" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i956]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i957]" time="0.333" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i958]" time="0.262" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/5e.json-i959]" time="0.325" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i960]" time="0.146" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i961]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i962]" time="0.144" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i963]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i964]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i965]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i966]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i967]" time="0.128" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i968]" time="0.191" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ea.json-i969]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i970]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i971]" time="0.153" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i972]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i973]" time="0.164" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i974]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i975]" time="0.142" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i976]" time="0.171" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i977]" time="0.125" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i978]" time="0.173" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/09.json-i979]" time="0.124" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i980]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i981]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i982]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i983]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i984]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i985]" time="0.152" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i986]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i987]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i988]" time="0.212" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/05.json-i989]" time="0.214" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i990]" time="0.225"><failure message="assert 255 == 35&#10; +  where 35 = &lt;cpu.MOS6502 object at 0x00000202FF2B79A0&gt;.r_accumulator">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 255 == 35
E        +  where 35 = &lt;cpu.MOS6502 object at 0x00000202FF2B79A0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i991]" time="0.222"><failure message="assert 79 == 66&#10; +  where 66 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_accumulator">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 79 == 66
E        +  where 66 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i992]" time="0.226"><failure message="assert 191 == 31&#10; +  where 31 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_accumulator">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 191 == 31
E        +  where 31 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i993]" time="0.235"><failure message="assert 90 == 88&#10; +  where 88 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_accumulator">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 90 == 88
E        +  where 88 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i994]" time="0.216"><failure message="assert 185 == 137&#10; +  where 137 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_accumulator">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 185 == 137
E        +  where 137 = &lt;cpu.MOS6502 object at 0x00000202804CA5F0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i995]" time="0.283" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i996]" time="0.248"><failure message="assert 183 == 6&#10; +  where 6 = &lt;cpu.MOS6502 object at 0x00000202FF316140&gt;.r_accumulator">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 183 == 6
E        +  where 6 = &lt;cpu.MOS6502 object at 0x00000202FF316140&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i997]" time="0.270"><failure message="assert 120 == 112&#10; +  where 112 = &lt;cpu.MOS6502 object at 0x00000202804BC340&gt;.r_accumulator">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 120 == 112
E        +  where 112 = &lt;cpu.MOS6502 object at 0x00000202804BC340&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i998]" time="0.263"><failure message="assert 219 == 210&#10; +  where 210 = &lt;cpu.MOS6502 object at 0x00000202804BC460&gt;.r_accumulator">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 219 == 210
E        +  where 210 = &lt;cpu.MOS6502 object at 0x00000202804BC460&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/15.json-i999]" time="0.234" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1000]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1001]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1002]" time="0.292" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1003]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1004]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1005]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1006]" time="0.234" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1007]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1008]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/0d.json-i1009]" time="0.277" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1010]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1011]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1012]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1013]" time="0.293" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1014]" time="0.259" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1015]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1016]" time="0.295" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1017]" time="0.232" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1018]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/1d.json-i1019]" time="0.298" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1020]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1021]" time="0.242" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1022]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1023]" time="0.277" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1024]" time="0.227" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1025]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1026]" time="0.280" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1027]" time="0.232" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1028]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/19.json-i1029]" time="0.291" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1030]" time="0.255" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1031]" time="0.303" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1032]" time="0.314" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1033]" time="0.333" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1034]" time="0.261" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1035]" time="0.344" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1036]" time="0.341" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1037]" time="0.256" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1038]" time="0.317" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/01.json-i1039]" time="0.304" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1040]" time="0.323" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1041]" time="0.254" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1042]" time="0.358" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1043]" time="0.263" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1044]" time="0.329" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1045]" time="0.361" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1046]" time="0.283" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1047]" time="0.338" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1048]" time="0.251" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/11.json-i1049]" time="0.330" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1050]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1051]" time="0.151" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1052]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1053]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1054]" time="0.145" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1055]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1056]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1057]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1058]" time="0.147" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/48.json-i1059]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1060]" time="0.202"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF3164A0&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1061]" time="0.137"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202804B0580&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1062]" time="0.145"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202804B0580&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1063]" time="0.189"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202804B0580&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1064]" time="0.198"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280444280&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1065]" time="0.200"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280444280&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1066]" time="0.206"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280444280&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1067]" time="0.144"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280444280&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1068]" time="0.189"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280444280&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json-i1069]" time="0.189"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/08.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020280444280&gt;, mode = None

    def PHP(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:700: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1070]" time="0.216"><failure message="assert 96 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C040&gt;.r_accumulator">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 96 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C040&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1071]" time="0.211"><failure message="assert 51 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C0A0&gt;.r_accumulator">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 51 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C0A0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1072]" time="0.275"><failure message="assert 98 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C100&gt;.r_accumulator">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 98 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C100&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1073]" time="0.233"><failure message="assert 173 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C160&gt;.r_accumulator">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 173 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C160&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1074]" time="0.257"><failure message="assert 225 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C1C0&gt;.r_accumulator">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 225 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C1C0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1075]" time="0.261"><failure message="assert 102 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C220&gt;.r_accumulator">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 102 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C220&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1076]" time="0.219"><failure message="assert 143 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C280&gt;.r_accumulator">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 143 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C280&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1077]" time="0.210"><failure message="assert 143 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C2E0&gt;.r_accumulator">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 143 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C2E0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1078]" time="0.235"><failure message="assert 189 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C340&gt;.r_accumulator">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 189 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C340&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json-i1079]" time="0.281"><failure message="assert 55 == 0&#10; +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C3A0&gt;.r_accumulator">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/68.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 55 == 0
E        +  where 0 = &lt;cpu.MOS6502 object at 0x00000202FF36C3A0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1080]" time="0.259" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1081]" time="0.256" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1082]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1083]" time="0.217" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1084]" time="0.212" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1085]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1086]" time="0.276" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1087]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1088]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/28.json-i1089]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1090]" time="0.197"><failure message="assert 19 == 137&#10; +  where 137 = &lt;cpu.MOS6502 object at 0x00000202FF36C400&gt;.r_accumulator">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 19 == 137
E        +  where 137 = &lt;cpu.MOS6502 object at 0x00000202FF36C400&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1091]" time="0.143"><failure message="assert 2 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x00000202FF36C460&gt;.r_accumulator">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 2 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x00000202FF36C460&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1092]" time="0.188"><failure message="assert 7 == 3&#10; +  where 3 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 7 == 3
E        +  where 3 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1093]" time="0.134"><failure message="assert 199 == 227&#10; +  where 227 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 199 == 227
E        +  where 227 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1094]" time="0.189"><failure message="assert 0 == 128&#10; +  where 128 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 0 == 128
E        +  where 128 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1095]" time="0.140"><failure message="assert 130 == 65&#10; +  where 65 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 130 == 65
E        +  where 65 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1096]" time="0.195"><failure message="assert 20 == 10&#10; +  where 10 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 20 == 10
E        +  where 10 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1097]" time="0.143"><failure message="assert 215 == 107&#10; +  where 107 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 215 == 107
E        +  where 107 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1098]" time="0.196"><failure message="assert 182 == 219&#10; +  where 219 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 182 == 219
E        +  where 219 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json-i1099]" time="0.138"><failure message="assert 50 == 153&#10; +  where 153 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 50 == 153
E        +  where 153 = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1100]" time="0.212" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1101]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1102]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1103]" time="0.204" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1104]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1105]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1106]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1107]" time="0.199" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1108]" time="0.198" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/26.json-i1109]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1110]" time="0.281" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1111]" time="0.249" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1112]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1113]" time="0.282" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1114]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1115]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1116]" time="0.244" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1117]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1118]" time="0.294" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/36.json-i1119]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1120]" time="0.227" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1121]" time="0.294" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1122]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1123]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1124]" time="0.288" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1125]" time="0.238" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1126]" time="0.223" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1127]" time="0.287" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1128]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/2e.json-i1129]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1130]" time="0.292" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1131]" time="0.316" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1132]" time="0.254" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1133]" time="0.313" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1134]" time="0.252" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1135]" time="0.305" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1136]" time="0.246" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1137]" time="0.297" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1138]" time="0.320" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/3e.json-i1139]" time="0.256" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1140]" time="0.189"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1141]" time="0.136"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1142]" time="0.186"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF315E40&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1143]" time="0.128"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826AF8E0&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1144]" time="0.177"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826AEE30&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1145]" time="0.128"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826AC670&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1146]" time="0.136"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202804D00D0&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1147]" time="0.186"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826AF670&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1148]" time="0.128"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202804D00D0&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json-i1149]" time="0.175"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6a.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202804D00D0&gt;, mode = &lt;AddressingMode.ACCUMULATOR: 12&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1150]" time="0.210"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202804D00D0&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1151]" time="0.206"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202808DA140&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1152]" time="0.206"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202808DB040&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1153]" time="0.199"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202808DB8B0&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1154]" time="0.267"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36CCA0&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1155]" time="0.226"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826ADB40&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1156]" time="0.221"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826ADB40&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1157]" time="0.216"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36E0E0&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1158]" time="0.210"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36E140&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json-i1159]" time="0.205"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/66.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36CCA0&gt;, mode = &lt;AddressingMode.ZERO_PAGE: 2&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1160]" time="0.294"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36E200&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1161]" time="0.234"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36E260&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1162]" time="0.298"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36E2C0&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1163]" time="0.251"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826AE770&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1164]" time="0.224"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826AE770&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1165]" time="0.244"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826AE770&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1166]" time="0.228"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826AE770&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1167]" time="0.287"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202826AE770&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1168]" time="0.234"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202808D96F0&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json-i1169]" time="0.298"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/76.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x000002028045C460&gt;, mode = &lt;AddressingMode.ZERO_PAGE_X: 3&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1170]" time="0.250"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202808D96F0&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1171]" time="0.234"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202808D96F0&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1172]" time="0.296"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202808D96F0&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1173]" time="0.242"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x000002028045C460&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1174]" time="0.229"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36E740&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1175]" time="0.250"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x000002028045C460&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1176]" time="0.229"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x000002028045C460&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1177]" time="0.287"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x000002028045C460&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1178]" time="0.232"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x000002028045C460&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json-i1179]" time="0.294"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/6e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x000002028045C460&gt;, mode = &lt;AddressingMode.ABSOLUTE: 5&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1180]" time="0.247"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281653550&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1181]" time="0.299"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281652950&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1182]" time="0.317"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281653EB0&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1183]" time="0.254"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36E260&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1184]" time="0.308"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36EB00&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1185]" time="0.245"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281652500&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1186]" time="0.294"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281653EB0&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1187]" time="0.313"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281617250&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1188]" time="0.248"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281652500&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json-i1189]" time="0.300"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/7e.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281614070&gt;, mode = &lt;AddressingMode.ABSOLUTE_X: 6&gt;

    def ROR(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:727: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1190]" time="0.328"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36ED40&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1191]" time="0.324"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281615990&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1192]" time="0.326"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36EE00&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1193]" time="0.329"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36ED40&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1194]" time="0.324"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36EEC0&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1195]" time="0.327"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36EF20&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1196]" time="0.330"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36EF80&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1197]" time="0.335"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36EFE0&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1198]" time="0.341"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36F040&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json-i1199]" time="0.349"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/40.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF36F0A0&gt;, mode = None

    def RTI(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:730: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1200]" time="0.354"><failure message="assert 55752 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281614DC0&gt;.r_program_counter">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 55752 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281614DC0&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1201]" time="0.270"><failure message="assert 44996 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 44996 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1202]" time="0.308"><failure message="assert 32240 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 32240 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1203]" time="0.308"><failure message="assert 60328 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 60328 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1204]" time="0.309"><failure message="assert 39492 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 39492 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1205]" time="0.309"><failure message="assert 58525 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 58525 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1206]" time="0.307"><failure message="assert 59037 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 59037 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1207]" time="0.309"><failure message="assert 26773 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 26773 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1208]" time="0.312"><failure message="assert 12899 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 12899 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json-i1209]" time="0.305"><failure message="assert 35093 == 1&#10; +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/60.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
&gt;       assert test['final']['pc'] == daveNES.r_program_counter
E       assert 35093 == 1
E        +  where 1 = &lt;cpu.MOS6502 object at 0x0000020281615F00&gt;.r_program_counter

tests\test_cpu.py:54: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1210]" time="0.180" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1211]" time="0.130" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1212]" time="0.177" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1213]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1214]" time="0.177" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1215]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1216]" time="0.175" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1217]" time="0.130" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1218]" time="0.178" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e9.json-i1219]" time="0.130" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1220]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1221]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1222]" time="0.198" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1223]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1224]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1225]" time="0.146" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1226]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1227]" time="0.197" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1228]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e5.json-i1229]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1230]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1231]" time="0.221"><failure message="assert 193 == 87&#10; +  where 87 = &lt;cpu.MOS6502 object at 0x000002028161E920&gt;.r_accumulator">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 193 == 87
E        +  where 87 = &lt;cpu.MOS6502 object at 0x000002028161E920&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1232]" time="0.217"><failure message="assert 130 == 21&#10; +  where 21 = &lt;cpu.MOS6502 object at 0x00000202FF36F520&gt;.r_accumulator">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 130 == 21
E        +  where 21 = &lt;cpu.MOS6502 object at 0x00000202FF36F520&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1233]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1234]" time="0.208"><failure message="assert 55 == 175&#10; +  where 175 = &lt;cpu.MOS6502 object at 0x00000202816703A0&gt;.r_accumulator">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 55 == 175
E        +  where 175 = &lt;cpu.MOS6502 object at 0x00000202816703A0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1235]" time="0.278" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1236]" time="0.232"><failure message="assert 171 == 139&#10; +  where 139 = &lt;cpu.MOS6502 object at 0x0000020281670C10&gt;.r_accumulator">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 171 == 139
E        +  where 139 = &lt;cpu.MOS6502 object at 0x0000020281670C10&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1237]" time="0.227"><failure message="assert 227 == 13&#10; +  where 13 = &lt;cpu.MOS6502 object at 0x000002028161E920&gt;.r_accumulator">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 227 == 13
E        +  where 13 = &lt;cpu.MOS6502 object at 0x000002028161E920&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1238]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json-i1239]" time="0.218"><failure message="assert 48 == 240&#10; +  where 240 = &lt;cpu.MOS6502 object at 0x00000202816703A0&gt;.r_accumulator">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f5.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
        daveNES.step_program()
    
        assert test['final']['pc'] == daveNES.r_program_counter
        assert test['final']['s'] == daveNES.r_stack_pointer
&gt;       assert test['final']['a'] == daveNES.r_accumulator
E       assert 48 == 240
E        +  where 240 = &lt;cpu.MOS6502 object at 0x00000202816703A0&gt;.r_accumulator

tests\test_cpu.py:56: AssertionError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1240]" time="0.214" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1241]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1242]" time="0.284" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1243]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1244]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1245]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1246]" time="0.221" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1247]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1248]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ed.json-i1249]" time="0.281" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1250]" time="0.243" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1251]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1252]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1253]" time="0.288" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1254]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1255]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1256]" time="0.295" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1257]" time="0.241" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1258]" time="0.226" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/fd.json-i1259]" time="0.299" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1260]" time="0.246" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1261]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1262]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1263]" time="0.290" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1264]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1265]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1266]" time="0.293" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1267]" time="0.241" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1268]" time="0.232" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f9.json-i1269]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1270]" time="0.258" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1271]" time="0.306" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1272]" time="0.322" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1273]" time="0.334" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1274]" time="0.265" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1275]" time="0.314" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1276]" time="0.327" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1277]" time="0.254" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1278]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/e1.json-i1279]" time="0.312" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1280]" time="0.324" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1281]" time="0.257" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1282]" time="0.313" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1283]" time="0.252" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1284]" time="0.309" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1285]" time="0.245" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1286]" time="0.301" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1287]" time="0.321" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1288]" time="0.255" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f1.json-i1289]" time="0.314" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1290]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1291]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1292]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1293]" time="0.182" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1294]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1295]" time="0.184" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1296]" time="0.136" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1297]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1298]" time="0.136" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/38.json-i1299]" time="0.183" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1300]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1301]" time="0.186" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1302]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1303]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1304]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1305]" time="0.185" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1306]" time="0.132" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1307]" time="0.185" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1308]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/f8.json-i1309]" time="0.186" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1310]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1311]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1312]" time="0.131" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1313]" time="0.185" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1314]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1315]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1316]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1317]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1318]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/78.json-i1319]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1320]" time="0.143" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1321]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1322]" time="0.197" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1323]" time="0.209" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1324]" time="0.145" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1325]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1326]" time="0.202" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1327]" time="0.141" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1328]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/85.json-i1329]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1330]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1331]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1332]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1333]" time="0.218" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1334]" time="0.213" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1335]" time="0.213" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1336]" time="0.217" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1337]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1338]" time="0.214" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/95.json-i1339]" time="0.222" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1340]" time="0.209" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1341]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1342]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1343]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1344]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1345]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1346]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1347]" time="0.281" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1348]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8d.json-i1349]" time="0.239" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1350]" time="0.250" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1351]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1352]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1353]" time="0.288" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1354]" time="0.237" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1355]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1356]" time="0.294" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1357]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1358]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9d.json-i1359]" time="0.300" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1360]" time="0.250" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1361]" time="0.238" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1362]" time="0.225" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1363]" time="0.295" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1364]" time="0.241" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1365]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1366]" time="0.298" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1367]" time="0.244" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1368]" time="0.234" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/99.json-i1369]" time="0.305" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1370]" time="0.256" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1371]" time="0.313" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1372]" time="0.251" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1373]" time="0.301" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1374]" time="0.316" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1375]" time="0.253" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1376]" time="0.303" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1377]" time="0.325" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1378]" time="0.258" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/81.json-i1379]" time="0.310" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1380]" time="0.331" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1381]" time="0.261" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1382]" time="0.316" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1383]" time="0.247" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1384]" time="0.307" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1385]" time="0.328" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1386]" time="0.262" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1387]" time="0.323" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1388]" time="0.258" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/91.json-i1389]" time="0.305" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1390]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1391]" time="0.143" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1392]" time="0.190" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1393]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1394]" time="0.209" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1395]" time="0.145" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1396]" time="0.197" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1397]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1398]" time="0.142" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/86.json-i1399]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1400]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1401]" time="0.210" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1402]" time="0.212" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1403]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1404]" time="0.207" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1405]" time="0.206" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1406]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1407]" time="0.203" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1408]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/96.json-i1409]" time="0.199" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1410]" time="0.276" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1411]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1412]" time="0.240" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1413]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1414]" time="0.236" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1415]" time="0.228" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1416]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1417]" time="0.227" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1418]" time="0.224" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8e.json-i1419]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1420]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1421]" time="0.143" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1422]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1423]" time="0.202" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1424]" time="0.141" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1425]" time="0.191" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1426]" time="0.202" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1427]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1428]" time="0.148" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/84.json-i1429]" time="0.192" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1430]" time="0.217" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1431]" time="0.213" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1432]" time="0.213" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1433]" time="0.216" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1434]" time="0.215" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1435]" time="0.211" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1436]" time="0.208" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1437]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1438]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/94.json-i1439]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1440]" time="0.205" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1441]" time="0.200" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1442]" time="0.201" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1443]" time="0.276" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1444]" time="0.235" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1445]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1446]" time="0.233" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1447]" time="0.230" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1448]" time="0.231" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8c.json-i1449]" time="0.229" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1450]" time="0.134" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1451]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1452]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1453]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1454]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1455]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1456]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1457]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1458]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/aa.json-i1459]" time="0.187" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1460]" time="0.136" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1461]" time="0.191" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1462]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1463]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1464]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1465]" time="0.189" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1466]" time="0.133" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1467]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1468]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/a8.json-i1469]" time="0.188" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1470]" time="0.134"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281670C10&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1471]" time="0.185"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020282C83460&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1472]" time="0.135"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020282C9D390&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1473]" time="0.182"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020282C5FE80&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1474]" time="0.194"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020282C5FE80&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1475]" time="0.135"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF425780&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1476]" time="0.187"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281603400&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1477]" time="0.132"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281603400&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1478]" time="0.183"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281603400&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json-i1479]" time="0.197"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/ba.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x0000020281603400&gt;, mode = None

    def TSX(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:784: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1480]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1481]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1482]" time="0.137" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1483]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1484]" time="0.135" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1485]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1486]" time="0.140" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1487]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1488]" time="0.139" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/8a.json-i1489]" time="0.197" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1490]" time="0.137" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1491]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1492]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1493]" time="0.193" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1494]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1495]" time="0.195" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1496]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1497]" time="0.196" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1498]" time="0.138" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/9a.json-i1499]" time="0.194" /><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1500]" time="0.139"><failure message="NotImplementedError">i = 0, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202FF425A80&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1501]" time="0.195"><failure message="NotImplementedError">i = 1, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202809FB1F0&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1502]" time="0.134"><failure message="NotImplementedError">i = 2, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202809FB1F0&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1503]" time="0.187"><failure message="NotImplementedError">i = 3, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202809FB1F0&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1504]" time="0.131"><failure message="NotImplementedError">i = 4, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202809FB1F0&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1505]" time="0.138"><failure message="NotImplementedError">i = 5, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202809FB1F0&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1506]" time="0.196"><failure message="NotImplementedError">i = 6, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202809FB1F0&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1507]" time="0.135"><failure message="NotImplementedError">i = 7, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202809FB1F0&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1508]" time="0.185"><failure message="NotImplementedError">i = 8, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202809FB1F0&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase><testcase classname="tests.test_cpu" name="test_daveNES[C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json-i1509]" time="0.132"><failure message="NotImplementedError">i = 9, json_filename = 'C:/Users/David/Documents/Coding/daveNES/tests/ProcessorTests-main/nes6502/v1/98.json'

    @pytest.mark.parametrize("json_filename, i", zip(json_files_reshaped, inds))
    def test_daveNES(i, json_filename):
        print(f'ind: {i}, filename: {json_filename}')
        test = get_json(json_filename)[i]
        daveNES = init_daveNES(test)
    
&gt;       daveNES.step_program()

tests\test_cpu.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\cpu.py:230: in step_program
    f(a) # run the opcode with the specified addressing mode
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;cpu.MOS6502 object at 0x00000202809FB1F0&gt;, mode = None

    def TYA(self, mode: AddressingMode):
&gt;       raise NotImplementedError
E       NotImplementedError

src\cpu.py:794: NotImplementedError</failure></testcase></testsuite></testsuites>